<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>感性理解吉利线段树</title>
    <url>/2022/02/18/%E6%84%9F%E6%80%A7%E7%90%86%E8%A7%A3%E5%90%89%E5%88%A9%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<p>吉老师也没那么牛逼。</p>
<span id="more"></span>

<p>对于一次区间对 $x$ 取 $\max$ 的操作，只有<strong>相邻（去除大于等于 $\boldsymbol x$ 的）的不相同的</strong>小于 $x$ 的数才会增加时间开销，然后这些数就被<strong>推平</strong>了。</p>
<p>也就是说线段树结构允许我们<strong>忽略</strong>大于 $x$ 的数。</p>
<p>按高度分层，增加时间开销的相邻位置数量可以看做较高层插入最低层的贡献。</p>
<p>如果某些较高层已经被取 $\max$ 过了，那么对应连续段中间是没有贡献的，两端必然对应着一次操作，也就是颜色段均摊。</p>
<p>加上区间加操作。</p>
<p>考虑最低层是什么。如果中间某段是由这个最低层抬高上去的，好像会多出两次贡献。但其实这两次贡献原本是摊到两侧的段上的，所以实际贡献并没有变。</p>
<p>如果不是，那原先就有贡献，只是贡献的方向有可能会反一下。</p>
<p>其余操作同理，所以都是一只 $\log$ 的。</p>
]]></content>
      <tags>
        <tag>总结</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>基础数论学习笔记</title>
    <url>/2022/02/15/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>啥都不会。</p>
<span id="more"></span>

<h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><p>辗转相除法（欧几里得算法）是更相减损术的优化，原理就是相减后最大公约数不会改变，过于显然，没必要设出来说明。</p>
<h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><p><strong>容斥</strong>，两数之积除以两数的最大公约数。</p>
<p>tips：若数以质因数分解的形式给出，算最大公约数系数取 $\min$，算最小公倍数系数取 $\max$。</p>
<h2 id="拓展欧几里得算法"><a href="#拓展欧几里得算法" class="headerlink" title="拓展欧几里得算法"></a>拓展欧几里得算法</h2><p>求不定方程 $ax+by&#x3D;\gcd(a,b)$ 的任意一个整数解。</p>
<p>令 $a\leq b,b&gt;0$，假设我们当前已经求出了不定方程</p>
<p>$$b\bmod a\times x+ay&#x3D;\gcd(b\bmod a,a)$$</p>
<p>的一组整数解 $x&#x3D;x’,y&#x3D;y’$，根据最大公约数的性质有</p>
<p>$$b\bmod a\times x’+ay’&#x3D;\gcd(a,b)$$</p>
<p>把取模换掉</p>
<p>$$\left(b-\left\lfloor\frac{b}{a}\right\rfloor a\right)x’+ay’&#x3D;\gcd(a,b)$$</p>
<p>整理成最初的形式</p>
<p>$$a\left(y’-\left\lfloor\frac{b}{a}\right\rfloor x’\right)+bx’&#x3D;\gcd(a,b)$$</p>
<p>那么 $x&#x3D;y’-\lfloor\frac{b}{a}\rfloor x’,y&#x3D;x’$ 就是不定方程 $ax+by&#x3D;\gcd(a,b)$ 的一组整数解。</p>
<p>递归求解的终止条件是 $a&#x3D;0$，此时 $x&#x3D;0,y&#x3D;1$ 是一组解。在返回这组解的前提下，我们可以归纳出解的范围。</p>
<p>假设递归得到 $-b\bmod a\leq y’\leq b\bmod a,-a\leq x’\leq a$。</p>
<p>取 $y’&#x3D;b\bmod a,x’&#x3D;-a$ 有 $x\leq b\bmod a+b-b\bmod a&#x3D;b,y\geq-a$。</p>
<p>取 $y’&#x3D;-b\bmod a,x’&#x3D;a$ 有 $x\geq-b\bmod a-b+b\bmod a&#x3D;-b,y\leq a$。</p>
<p><strong>容易发现递归最底层也就是 $\boldsymbol{a&#x3D;0}$ 的情况比较特殊，假设是不可能成立的，但递归到上一层就一定成立了。</strong>所以当 $a&gt;0$ 时 exgcd 求出的不定方程 $ax+by&#x3D;\gcd(a,b)$ 的解 $x,y$ 满足 $x\in[-b,b],y\in[-a,a]$。</p>
<h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p>$\phi(n)$ 表示小于等于 $n$ 的与 $n$ 互质的数的个数，所以 $\phi(1)&#x3D;1$。</p>
<p>当 $n$ 为质数时，$\phi(n)&#x3D;n-1$。</p>
<h3 id="求单个数的欧拉函数"><a href="#求单个数的欧拉函数" class="headerlink" title="求单个数的欧拉函数"></a>求单个数的欧拉函数</h3><p>由唯一分解定理，设 $n&#x3D;\Pi_{i&#x3D;1}^s p_i^{k_i}$。然后对于质因子容斥，可以发现容斥式就是 $n\Pi_{i&#x3D;1}^s\frac{p_i-1}{p_i}$ 的展开式。</p>
<p>在分解质因数的时候直接计算即可。</p>
<h2 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h2><p>设 $a,p\in\mathbb{N^+}$，$p$ 是质数，且满足 $\gcd(a,p)&#x3D;1$，则有 $a^{p-1}\equiv 1\pmod p$。</p>
<h3 id="引理-1"><a href="#引理-1" class="headerlink" title="引理 1"></a>引理 1</h3><p>对于任意三个正整数 $a,b,c$ 满足 $\gcd(c,m)&#x3D;1$，若 $ac\equiv bc\pmod m$，则 $a\equiv b\pmod m$。</p>
<p>移项变成 $c(a-b)\equiv 0\pmod m$ 后，因为互质所以只能是 $a-b\equiv 0\pmod m$。</p>
<h3 id="引理-2"><a href="#引理-2" class="headerlink" title="引理 2"></a>引理 2</h3><p>若 $\{a_1,\cdots,a_m\}$ 是模 $m$ 的一个完全剩余系，整数 $b$ 满足 $\gcd(b,m)&#x3D;1$，那么 $\{a_1b,\cdots,a_mb\}$ 也是模 $m$ 的一个完全剩余系。</p>
<p>反证，如果存在 $a_ib\equiv a_jb\pmod m$，根据引理 1 可得 $a_i\equiv a_j\pmod m$，不符合完全剩余系的定义。</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>构造模 $p$ 的一个完全剩余系 $\{0,1,2,\cdots,p-1\}$。</p>
<p>根据引理 2 可得 $\{0,a,2a,\cdots,(p-1)a\}$ 也是模 $p$ 的一个完全剩余系。</p>
<p>一一对应可得 $1\times 2\times 3\times\cdots\times(p-1)\equiv a\times 2a\times\cdots\times(p-1)a\pmod p$。</p>
<p>即 $(p-1)!\equiv(p-1)!\times a^{p-1}\pmod p$。</p>
<p>显然 $\gcd(p,(p-1)!)&#x3D;1$，根据引理 1 即可证毕。</p>
<h2 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h2><p>设 $a,n\in\mathbb{N^+}$ 且满足 $\gcd(a,n)$，则有 $a^{\phi(n)}\equiv 1\pmod n$。</p>
<p>容易看出费马小定理其实是欧拉定理的特殊情况。</p>
<p>首先两个与 $n$ 互质的数的乘积仍然与 $n$ 互质。</p>
<p>所以把费马小定理证明里面的完全剩余系换成与 $n$ 互质的剩余系即可。</p>
<h2 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h2><blockquote>
<p>乘法逆元，是指数学领域群 $G$ 中任意一个元素 $a$，都在 $G$ 中有<strong>唯一</strong>的逆元 $a’$，具有性质 $a\times a’&#x3D;a’\times a&#x3D;e$，其中 $e$ 为该群的单位元。</p>
<p>单位元是集合里的一种特别的元，与该集合里的运算有关。当它和其他元素结合时，并不会改变那些元素。</p>
</blockquote>
<p>所以在模域下的乘法中，单位元就是 $1$。</p>
<p>具体地，若 $a\times b\equiv 1\pmod p$，则称 $b$ 是 $a$ 在模 $p$ 意义下的乘法逆元，记作 $a^{-1}$，即 $b\equiv\frac{1}{a}\pmod p$。</p>
<p>可以写成 $a\times b+p\times q&#x3D;1$ 的形式，根据裴蜀定理只有 $a$ 与 $p$ 互质时才有解，这也就是乘法逆元存在的条件。</p>
<p>在求 $\frac{y}{x}$ 时我们可以先求出 $\frac{1}{x}$ 再乘上 $y$。</p>
<h3 id="费马小定理求单个数的乘法逆元"><a href="#费马小定理求单个数的乘法逆元" class="headerlink" title="费马小定理求单个数的乘法逆元"></a>费马小定理求单个数的乘法逆元</h3><p>只能解决 $p$ 是质数的情况。</p>
<p>$$a\times b\equiv 1\pmod p$$</p>
<p>$$a\times b\equiv a^{p-1}\pmod p$$</p>
<p>$$b\equiv a^{p-2}\pmod p$$</p>
<h3 id="欧拉定理求单个数的乘法逆元"><a href="#欧拉定理求单个数的乘法逆元" class="headerlink" title="欧拉定理求单个数的乘法逆元"></a>欧拉定理求单个数的乘法逆元</h3><p>需要事先求出 $\phi(a)$。</p>
<p>$$a\times b\equiv 1\pmod p$$</p>
<p>$$a\times b\equiv a^{\phi(a)}\pmod p$$</p>
<p>$$b\equiv a^{\phi(a)-1}\pmod p$$</p>
<h3 id="前缀积求一堆数的乘法逆元"><a href="#前缀积求一堆数的乘法逆元" class="headerlink" title="前缀积求一堆数的乘法逆元"></a>前缀积求一堆数的乘法逆元</h3><p>在求组合数时我们常常会需要求阶乘的逆元。</p>
<p>先用上面的方法求出 $n!$ 的逆元，然后考虑倒着递推，从 $i$ 推到 $i-1$：</p>
<p>$$\frac{1}{(i-1)!}\equiv\frac{1}{i!}\times i\pmod p$$</p>
<p>再深入思考一下你会发现：</p>
<p>$$\frac{1}{i!}\times(i-1)!\equiv\frac{1}{i}\pmod p$$</p>
<p>这样就做到了线性求 $1\sim n$ 的逆元。</p>
<p>最后将 $i$ 替换成 $a_i$ 就行了。</p>
<h2 id="威尔逊定理"><a href="#威尔逊定理" class="headerlink" title="威尔逊定理"></a>威尔逊定理</h2><p>$&gt;1$ 的整数 $p$ 满足 $(p-1)!\equiv-1\pmod p$ 的充分必要条件是 $p$ 为质数。</p>
<h3 id="充分性"><a href="#充分性" class="headerlink" title="充分性"></a>充分性</h3><p>两边同除以 $p-1$ 得到 $(p-2)!\equiv 1\pmod p$。</p>
<p>考虑逆元为其本身的数，可以发现只有 $1$ 和 $p-1$。</p>
<p>所以 $2\sim p-2$ 的逆元组成的集合同样为 $2\sim p-2$，可以两两划分成乘积为 $1$ 的组。</p>
<h3 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h3><p>如果 $p$ 不为质数，那么可以将 $p$ 表示成 $a\times b(1&lt;a,b&lt;p)$。</p>
<p>当 $a&#x3D;b$ 时，发现 $p&#x3D;4$ 符合，$p\geq 9$ 时 $a&lt;2a&lt;p-1$。</p>
<p>那么除了 $p&#x3D;4$ 以外 $(p-1)!$ 一定存在因子 $p$，所以 $(p-1)!\equiv 0\pmod p$。</p>
]]></content>
      <tags>
        <tag>素数</tag>
        <tag>总结</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>CF27E Number With The Given Amount Of Divisors</title>
    <url>/2022/02/15/CF27E-Number-With-The-Given-Amount-Of-Divisors/</url>
    <content><![CDATA[<p>前置芝士：反素数。</p>
<span id="more"></span>

<p>显然答案不是单调递增的。</p>
<p>直接暴力递推，枚举新加入某个质因子多少个，时间复杂度 $O(n^3\times p)$，其中 $p$ 表示用到的质数数量，具体级别不清楚但肯定很小。</p>
<p>根本跑不满，所以直接就过了。</p>
]]></content>
      <tags>
        <tag>素数</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1468I Plane Tiling</title>
    <url>/2022/02/09/CF1468I-Plane-Tiling/</url>
    <content><![CDATA[<p>向量对称是没有关系的，所以可以将两个 $x$ 坐标或两个 $y$ 坐标调整成非负数，以下默认如此。</p>
<span id="more"></span>

<p>以 $(0,0)$ 作为一角的两向量合成的平行四边形作为底块覆盖整个平面。</p>
<p>容易发现平行四边形内部和邻边上的点（不包含四个顶点）是无法互相到达的，外加顶点，就能拓展到整个平面。</p>
<p>根据皮克定理 $S&#x3D;n+\frac{s}{2}-1$，容易发现这些点是数量就是平行四边形的面积，这样是否存在解就可以直接判断了。但如果用计算几何去找出这些点会被卡精度。</p>
<p>不妨钦定起点为 $(0,0)$ 然后往平行原坐标轴的方向走，遇到相同的边就记录一下<strong>对应到原坐标系、与走的方向垂直的相对位置</strong>。</p>
<p><img src="/2022/02/09/CF1468I-Plane-Tiling/1.png"></p>
<p>观察它们与一侧顶点的距离，显然可以表示成 $ax_1+bx_2$ 或是 $ay_1+by_2$，并且是一步一步变化的。如果将每种距离都取到恰好一次，就恰好拼成了一个平行四边形，也就找出了解。</p>
<p>根据裴蜀定理，只要将初始的一个点增加至 $\gcd(x_1,x_2)$ 或 $\gcd(y_1,y_2)$ 个点即可。</p>
<p>也就是说任意一个边长为 $\gcd(x_1,x_2)$ 或 $\gcd(y_1,y_2)$ 的面积为 $n$ 的点矩形（不能旋转九十度）都可为解。</p>
]]></content>
      <tags>
        <tag>数论</tag>
        <tag>计算几何</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>普通线段树时间复杂度分析</title>
    <url>/2022/02/08/%E6%99%AE%E9%80%9A%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>转转表示一脸懵逼。</p>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	++cnt;</span><br><span class="line">	<span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)<span class="keyword">return</span> val[p];</span><br><span class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(qr&lt;=mid)<span class="keyword">return</span> <span class="built_in">query</span>(ls,l,mid,ql,qr);</span><br><span class="line">	<span class="keyword">if</span>(ql&gt;mid)<span class="keyword">return</span> <span class="built_in">query</span>(rs,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">query</span>(ls,l,mid,ql,qr),<span class="built_in">query</span>(rs,mid+<span class="number">1</span>,r,ql,qr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>称单个线段树结点管辖的范围为直接区间，函数会在区间的 $O(\log n)$ 个极大直接区间处返回。</p>
<p>最后一句话每执行一次都会将返回分为两部分，而另外两句话舍去的空区间同样也是全局除查询区间外的极大直接区间。</p>
<p>所以单次查询的时间复杂度为 $O(\log n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max(x,y)((x)&gt;(y)?x:y)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	++cnt;</span><br><span class="line">	<span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)<span class="keyword">return</span> val[p];</span><br><span class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(qr&lt;=mid)<span class="keyword">return</span> <span class="built_in">query</span>(ls,l,mid,ql,qr);</span><br><span class="line">	<span class="keyword">if</span>(ql&gt;mid)<span class="keyword">return</span> <span class="built_in">query</span>(rs,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Max</span>(<span class="built_in">query</span>(ls,l,mid,ql,qr),<span class="built_in">query</span>(rs,mid+<span class="number">1</span>,r,ql,qr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到取最大值变成了宏定义，最值取到的调用会被递归两次。</p>
<p>补齐成为二的幂次，多出来的位置看做插入线段树底层，<strong>不会影响到上层结构</strong>就没有问题了。</p>
<p>以极大直接区间作为自变量，$T(n)&#x3D;2T(n-1)+O(1)&#x3D;O(2^n)$。</p>
<p>但极大直接区间数量的常数跑到了最终时间复杂度的指数那里。把最大的具体数量写一写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3 4 5 6 7 8 9 10 ...</span><br><span class="line">1 2 2 3 3 4 3 4 4 5  ...</span><br></pre></td></tr></table></figure>

<p>看不出来。</p>
<p>虽然最大极大直接区间可能存在两个，但一旦分成两半递归后一侧就会一直是长度大于一半的最大极大直接区间，所以最坏就是最大值取在端点。</p>
<p>以区间长度作为自变量，$T(n)&#x3D;2T(n&#x2F;2)+O(1)&#x3D;O(n)$。</p>
]]></content>
      <tags>
        <tag>总结</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>头脑发昏</title>
    <url>/2022/01/28/%E5%A4%B4%E8%84%91%E5%8F%91%E6%98%8F/</url>
    <content><![CDATA[<p>记录一些简单但一时没想出来的题。</p>
<span id="more"></span>

<h3 id="CF1629B-GCD-Arrays"><a href="#CF1629B-GCD-Arrays" class="headerlink" title="CF1629B GCD Arrays"></a>CF1629B GCD Arrays</h3><p>最终剩下的一些数一定有一个共同的质因子。操作可以看做合并质因子，所以每次把不含这个质因子的数合并到含这个质因子的数中肯定最优。</p>
<p>问题就变成了 $[l,r]$ 中存在某个相同质因子的数最多有几个。因为对于正奇数 $x$ 有 $\gcd(x,x+2)&#x3D;1$，所以这个质因子取 $2$ 即可。</p>
<h3 id="CF1632C-Strange-Test"><a href="#CF1632C-Strange-Test" class="headerlink" title="CF1632C Strange Test"></a>CF1632C Strange Test</h3><p>因为一次或操作会使得 $a\geq b$，所以最多使用一次或操作，并且之后不会再增加 $a$。</p>
<p>所以在或操作前后增加 $b$ 是一样的，不妨在或操作前统一加好。</p>
<p>那么就可以枚举 $b$ 增加了多少，问题就变成了求最小的 $a$，满足二进制位上为 $1$ 的位置是 $b$ 的一个子集。从高位向低位贪心，能不选就不选。</p>
]]></content>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Splay 学习笔记</title>
    <url>/2022/01/28/Splay-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>势能仅仅是一个调蓄的工具，所以常数的忽略必须和时间开销统一。</p>
<span id="more"></span>

<p>zig 和 zag 时间开销加势能变化量等于两个结点势能差加一。</p>
<p>zig-zig 和 zig-zag 时间开销加势能变化量等于两个结点势能差。</p>
<p>一次 splay 时间开销加势能变化量最多等于最终位置初始位置势能差加一，因为<strong>可能</strong>多出一次 zig 或 zag。</p>
<p>$m$ 次 splay 时间开销加势能总变化量最多等于 $m\log n$。</p>
<p>根据势能函数的定义，势能差必然为正，但由于时间开销的存在，势能变化量可正可负，势能总变化量也可正可负。而势能总变化量的绝对值最多等于 $n\log n$，所以总时间开销最多等于 $(m+n)\log n$。</p>
<hr>
<p>每次查询后旋转到根，就仅仅是增加了常数。</p>
<p>插入和删除操作最多带来 $\log n$ 的势能变化量，不会影响时间复杂度。</p>
<hr>
<p>为了方便把操作的区间夹在根的右子树的左子树，我们一般在 Splay 初始化时插入 $\infty$ 和 $-\infty$。</p>
<p>对于 Splay，我习惯于在 <code>pushdown</code> 时才更新当前结点的某些信息，所以我就在 <code>pushup</code> 中先 <code>pushdown</code> 左右儿子。</p>
<p>维护序列时，因为不存在的儿子用 $0$ 表示，所以不进行判断会出问题。拿最大子段和不能选空的情况作为例子，具体地，我们有以下解决方法：</p>
<ul>
<li>$0$ 的最大子段和置为 $-\infty$，避免选空。</li>
<li>最两侧结点（即初始化插入的两个）的值置为 $-\infty$，避免单独被选成最大子段和。</li>
<li>有了 $0$ 的特殊性，所以不能对它 <code>pushdown</code> 或者 <code>pushup</code>，在一些地方要注意一下。</li>
</ul>
<hr>
<p><a href="https://cs.au.dk/~gerth/papers/finger05.pdf">原论文</a></p>
<p>部分结论摘要：</p>
<ul>
<li>Splay 是 Dynamic Finger Search Tree，访问的均摊时间复杂度为 $O(\log d(finger_{i-1},finger_i))$，其中 $d$ 表示排名之差。</li>
<li>合并两棵大小分别为 $n,m(n\leq m)$ 的 Dynamic Finger Search Tree 的时间复杂度为 $O(n\log\frac{m}{n})$。具体合并方法为将较小树中元素从小到大或从大到小加入较大树。</li>
<li>按任意顺序将 $n$ 个元素合并成一棵 Dynamic Finger Search Tree 的时间复杂度为 $O(n\log n)$。除了归纳证明外我们还可以考虑每个元素合并时被加入的贡献 $O(\sum_{i&#x3D;2}^k\frac{s_i}{s_{i-1}})&#x3D;O(\log n)$，其中 $s_{i-1}$ 和 $s_i$ 表示该元素在第 $i-1$ 次被加入时较小和较大树的大小。</li>
</ul>
<hr>
<p>加入分裂一个区间的操作，仍然最多带来 $\log n$ 的势能变化量。</p>
<p>但合并时暴力加入会导致时间复杂度变成 $O(nm)$。不妨每次判断当前极值是否存在，存在就直接加入，否则就分裂出一棵可以直接插入的子树插入。用每个元素和相邻元素差的对数作为势能函数，如果一个间隔在合并的时候被分裂开，肯定有一边与相邻元素的差减半。这样至少是 $O((m+n)\log^2 n)$ 的，不知道用 Finger Search 分析能否更优。</p>
]]></content>
      <tags>
        <tag>总结</tag>
        <tag>Splay</tag>
      </tags>
  </entry>
</search>
